name: Install MonetDB
description: Install MonetDB and make it ready for use
outputs:
  prefix:
    description: directory prefix under which everything has been installed
    value: ${{ steps.set_output.outputs.prefix }}
  bindir:
    description: directory under $prefix where binaries has been installed
    value: ${{ steps.set_output.outputs.bindir }}
  includedir:
    description: directory under $prefix where include files has been installed
    value: ${{ steps.set_output.outputs.includedir }}
  libdir:
    description: directory under $prefix where libraries has been installed
    value: ${{ steps.set_output.outputs.libdir }}
  dynsuffix:
    description: "the extension used for shared libraries on this platform: so, dylib or dll"
    value: ${{ steps.set_output.outputs.dynsuffix }}

runs:
  using: "composite"
  steps:

  # This step leaves GITHUB_OUTPUT in the file github.output
  - name: Linux Package Install
    if: runner.os == 'Linux'
    run: ${{ github.action_path }}/install-linux-bin.sh
    shell: bash

  # This step leaves GITHUB_OUTPUT in the file github.output
  - name: MacOS Homebrew Install
    if: runner.os == 'macOS'
    run: ${{ github.action_path }}/install-macos-bin.sh
    shell: bash

  # This step leaves GITHUB_OUTPUT in the file github.output
  # It's implemented as a composite action rather than a shell script
  # because that's easier to debug
  - name: Windows MSI Install
    if: runner.os == 'Windows'
    uses: ./install-windows-bin

  - name: Is it still running
    run: python3 ${{ github.action_path }}/tryconnect.py
    shell: pwsh

  # This step picks up the github.output file generated
  # by the earlier install step
  - name: Communicate prefix, bindir, libdir, includedir and dynsuffix
    id: set_output
    run: |
      cat github.output # should have been generated by install-*-bin.sh
      cat github.output >>$GITHUB_OUTPUT
    shell: bash